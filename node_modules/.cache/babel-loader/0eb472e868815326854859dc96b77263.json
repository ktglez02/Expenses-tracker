{"ast":null,"code":"var _jsxFileName = \"/Users/karlagonzalez/Desktop/finantial-app/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = event => {\n    //you get the event object automatically\n    event.preventDefault(); //used to prevent the browser ffrom reloading the page and sending a request to the developer server, thus the page will not reload whiout sending any new request to the browser, not JSX code, only JS\n\n    const expenseData = {\n      // expense data is an object with three propperties that point to the prop of state\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate) //creates a new date with the date constructor, \"(enteredDate)\" will parse that date string and conver it into a date object\n\n    };\n    console.log(expenseData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}; //to add a listener here you can't use onClick event, since the submit <buttom> is inside a form, the form is the one that send the on event \n\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n/**\n * Another way to do it\n */\n\n/** \n  const [userInput, setUserInput] =  useState({ // this is how u define an object (only the state part \"({})\")\n        enteredTitle: '',                       // entered, title-amount and date are attributes of the useState object, must always be defiend with empty strings\n        enteredAmount: '',\n        enteredDate: ''\n\n    }); \n    \n\nconst titleChangeHandler = (event) => { //event is a js function already stored in react, it always takes and returns a string, even if it is a digit string\n\n  setUserInput({\n    ...userInput,\n    enteredTitle: event.target.value, //target is the properti of some DOM element. in this case it means entered text input\n \n})\n                                   // value is one of the variables of the event function, that stores the string value that will be displayed in the screen\nsetUserInput((prevState) => {\n    return{...prevState, enteredTitle:event.target.value };\n}); //this func will recive the prev state, we need to use this approach, i you schechule multiple states at the same time, you might end up with an outdated state\n//prevState, makes sure the state passes is the one before\n\n}; \n\n/**const amountChangeHandler = (event) => { \n    setUserInput({\n        ...userInput,\n        enteredTitle: event.target.value, \n    })\n    }; \n    const dateChangeHandler = (event) => { \n        setUserInput({\n            ...userInput,\n            enteredTitle: event.target.value, \n        })\n        }; \n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","console","log"],"sources":["/Users/karlagonzalez/Desktop/finantial-app/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ExpenseForm.css';\n\n\nconst ExpenseForm = () => {\n\n    const [enteredTitle, setEnteredTitle] = useState('');\n    const [enteredAmount, setEnteredAmount] = useState('');\n    const [enteredDate, setEnteredDate] = useState('');\n\n    const titleChangeHandler = (event) => {\n        setEnteredTitle(event.target.value);\n    };\n    const amountChangeHandler = (event) => {\n        setEnteredAmount(event.target.value);\n    };\n    const dateChangeHandler = (event) => {\n        setEnteredDate(event.target.value);\n    };\n    const submitHandler = (event) => { //you get the event object automatically\n        event.preventDefault(); //used to prevent the browser ffrom reloading the page and sending a request to the developer server, thus the page will not reload whiout sending any new request to the browser, not JSX code, only JS\n\n        const expenseData = { // expense data is an object with three propperties that point to the prop of state\n            title: enteredTitle,\n            amount: enteredAmount,\n            date: new Date(enteredDate) //creates a new date with the date constructor, \"(enteredDate)\" will parse that date string and conver it into a date object\n        };\n        console.log(expenseData);\n    };\n    return (\n        <form onSubmit={submitHandler}>\n            <div className='new-expense__controls'>\n                <div className='new-expense__control'>\n                    <label>Title</label>\n                    <input \n                    type='text' \n                    onChange={titleChangeHandler} />\n                </div>\n\n                <div className='new-expense__control'>\n                    <label>Amount</label>\n                    <input \n                    type='number'\n                     min=\"0.01\" \n                     step=\"0.01\" \n                     onChange={amountChangeHandler} />\n                </div>\n\n                <div className='new-expense__control'>\n                    <label>Date</label>\n                    <input type='date' \n                    min=\"2019-01-01\" \n                    max=\"2022-12-31\" \n                    onChange={dateChangeHandler} />\n                </div>\n            </div>\n\n            <div className='new-expense__actions'> \n                <button type=\"submit\" >Add Expense </button> \n            </div>\n        </form>\n    );\n};\n//to add a listener here you can't use onClick event, since the submit <buttom> is inside a form, the form is the one that send the on event \n\nexport default ExpenseForm;\n\n\n\n\n/**\n * Another way to do it\n */\n/** \n  const [userInput, setUserInput] =  useState({ // this is how u define an object (only the state part \"({})\")\n        enteredTitle: '',                       // entered, title-amount and date are attributes of the useState object, must always be defiend with empty strings\n        enteredAmount: '',\n        enteredDate: ''\n\n    }); \n    \n\nconst titleChangeHandler = (event) => { //event is a js function already stored in react, it always takes and returns a string, even if it is a digit string\n\n  setUserInput({\n    ...userInput,\n    enteredTitle: event.target.value, //target is the properti of some DOM element. in this case it means entered text input\n \n})\n                                   // value is one of the variables of the event function, that stores the string value that will be displayed in the screen\nsetUserInput((prevState) => {\n    return{...prevState, enteredTitle:event.target.value };\n}); //this func will recive the prev state, we need to use this approach, i you schechule multiple states at the same time, you might end up with an outdated state\n//prevState, makes sure the state passes is the one before\n\n}; \n\n/**const amountChangeHandler = (event) => { \n    setUserInput({\n        ...userInput,\n        enteredTitle: event.target.value, \n    })\n    }; \n    const dateChangeHandler = (event) => { \n        setUserInput({\n            ...userInput,\n            enteredTitle: event.target.value, \n        })\n        }; \n*/"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;;;AAGA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EAEtB,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;;EAEA,MAAMQ,kBAAkB,GAAIC,KAAD,IAAW;IAClCN,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;EACH,CAFD;;EAGA,MAAMC,mBAAmB,GAAIH,KAAD,IAAW;IACnCJ,gBAAgB,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;EACH,CAFD;;EAGA,MAAME,iBAAiB,GAAIJ,KAAD,IAAW;IACjCF,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;EACH,CAFD;;EAGA,MAAMG,aAAa,GAAIL,KAAD,IAAW;IAAE;IAC/BA,KAAK,CAACM,cAAN,GAD6B,CACL;;IAExB,MAAMC,WAAW,GAAG;MAAE;MAClBC,KAAK,EAAEf,YADS;MAEhBgB,MAAM,EAAEd,aAFQ;MAGhBe,IAAI,EAAE,IAAIC,IAAJ,CAASd,WAAT,CAHU,CAGY;;IAHZ,CAApB;IAKAe,OAAO,CAACC,GAAR,CAAYN,WAAZ;EACH,CATD;;EAUA,oBACI;IAAM,QAAQ,EAAEF,aAAhB;IAAA,wBACI;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UACA,IAAI,EAAC,MADL;UAEA,QAAQ,EAAEN;QAFV;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAQI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UACA,IAAI,EAAC,QADL;UAEC,GAAG,EAAC,MAFL;UAGC,IAAI,EAAC,MAHN;UAIC,QAAQ,EAAEI;QAJX;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QARJ,eAiBI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UACA,GAAG,EAAC,YADJ;UAEA,GAAG,EAAC,YAFJ;UAGA,QAAQ,EAAEC;QAHV;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eA2BI;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QA3BJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiCH,CA1DD,C,CA2DA;;;GA3DMZ,W;;KAAAA,W;AA6DN,eAAeA,WAAf;AAKA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}